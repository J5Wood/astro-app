---
import ProjectCard from "./ProjectCard.astro";
import {
  picShare,
  guhradient,
  picSure,
  flavorTown,
  coffeeTalk,
} from "./ProjectData";
---

<section id="project-section" class="projects-container">
  <div class="outer-header-wrapper">
    <div class="inner-header-wrapper">
      <h2 class="project-header">Projects</h2>
    </div>
  </div>
  <div class="card-container">
    <div class="project-wrapper minimized" tabindex="0">
      <ProjectCard data={picShare} />
    </div>
    <div class="project-wrapper card-two minimized" tabindex="0">
      <ProjectCard data={guhradient} />
    </div>
    <div class="project-wrapper card-three minimized" tabindex="0">
      <ProjectCard data={picSure} />
    </div>
    <div class="project-wrapper card-four minimized" tabindex="0">
      <ProjectCard data={flavorTown} />
    </div>
    <div class="project-wrapper card-five minimized" tabindex="0">
      <ProjectCard data={coffeeTalk} />
    </div>
  </div>
</section>
<style>
  .projects-container {
    display: flex;
    flex-flow: column nowrap;
    align-items: center;
    justify-items: center;
    overflow: hidden;
    z-index: 100;
    gap: 2em;
  }

  .outer-header-wrapper {
    grid-column: 1/6;
    transition: width 0.5s ease-in;
    background: linear-gradient(
      90deg,
      rgba(169, 87, 241, 1) 1%,
      rgba(16, 0, 236, 1) 3%,
      rgba(0, 236, 181, 1) 7%,
      rgba(169, 87, 241, 1) 12%,
      rgba(0, 236, 181, 1) 16%,
      rgba(169, 87, 241, 1) 21%,
      rgba(16, 0, 236, 1) 24%,
      rgba(169, 87, 241, 1) 26%,
      rgba(0, 236, 181, 1) 75%,
      rgba(16, 0, 236, 1) 78%,
      rgba(0, 236, 181, 1) 81%,
      rgba(169, 87, 241, 1) 90%,
      rgba(16, 0, 236, 1) 92%,
      rgba(0, 236, 181, 1) 95%,
      rgba(169, 87, 241, 1) 100%
    );
    width: 0em;
    height: 3em;
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .inner-header-wrapper {
    background-color: var(--main-background);
    width: 92%;
    height: 105%;
    display: flex;
    justify-content: center;
    align-items: center;
    clip-path: polygon(
      0% 10%,
      10% 10%,
      10% 0%,
      90% 0%,
      90% 10%,
      100% 10%,
      100% 90%,
      90% 90%,
      90% 100%,
      10% 100%,
      10% 90%,
      0% 90%
    );
    text-align: center;
  }

  .card-container {
    display: grid;
    grid-template-columns: 1fr 1fr 1fr 1fr 1fr;
    grid-row: auto;
    align-items: center;
    justify-items: center;
    width: 100%;
    gap: 1em;
  }

  .project-wrapper {
    width: max(150px, 80%);
    height: 20em;
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 0;
    transition:
      opacity 0.4s ease-out 0.4s,
      position 1s ease-in;
    grid-column: 1 / 2;
  }

  .card-two {
    transition-delay: 0.6s;
    grid-column: 2 / 3;
  }

  .card-three {
    transition-delay: 0.8s;
    grid-column: 3 / 4;
  }

  .card-four {
    transition-delay: 1s;
    grid-column: 4 / 5;
  }

  .card-five {
    transition-delay: 1.2s;
    grid-column: 5 / 6;
  }

  .pop-in {
    opacity: 1;
  }

  .expand {
    width: 10em;
  }

  .minimized {
    cursor: pointer;
  }

  .enlarge {
    position: fixed;
    top: 0%;
    bottom: 0%;
    margin: auto;
    max-width: 60%;
    height: min(100vh, 500px);
    max-height: 100vh;
    background-color: black;
    border-radius: 1em;
    z-index: 2;
    cursor: default;
  }

  @media (max-width: 825px) {
    .card-container {
      grid-template-columns: 1fr 1fr 1fr 1fr 1fr 1fr;
    }

    .project-wrapper {
      grid-column: 1 / 3;
    }

    .card-two {
      grid-column: 3 / 5;
    }
    .card-three {
      grid-column: 5 / 7;
    }

    .card-four {
      grid-column: 2 / 4;
    }
    .card-five {
      grid-column: 4 / 6;
    }
  }

  @media (max-width: 600px) {
    .card-container {
      grid-template-columns: 1fr;
    }

    .project-wrapper {
      grid-column: 1 / 2;
    }

    .card-two {
      transition-delay: 0.6s;
      grid-column: 1 / 2;
    }

    .card-three {
      transition-delay: 0.8s;
      grid-column: 1 / 2;
    }

    .card-four {
      transition-delay: 1s;
      grid-column: 1 / 2;
    }

    .enlarge {
      height: max(75%, 650px);
      max-width: 75%;
    }
  }

  @media (max-width: 300px) {
    .enlarge {
      top: 1%;
    }
  }
</style>
<script>
  const projectsContainer = document.querySelector(
    ".projects-container"
  ) as HTMLElement;
  const projectPosition = projectsContainer.offsetTop;
  const projectHeader = projectsContainer.children[0];
  const projectCards = [...projectsContainer.children[1].children];
  const lightDarkModeSwitch = document.getElementById(
    "switch"
  ) as HTMLInputElement;
  const firstContactCard = document.querySelector(".contact-card").children[0];
  const pullStringButton = document.querySelector(".about-me-light");

  function animateIn() {
    const midpoint = window.scrollY + window.innerHeight / 2;
    if (projectPosition < midpoint) {
      projectHeader.classList.add("expand");
      projectCards[0].classList.add("pop-in");
      projectCards[1].classList.add("pop-in");
      projectCards[2].classList.add("pop-in");
      projectCards[3].classList.add("pop-in");
      projectCards[4].classList.add("pop-in");
    }
  }

  window.addEventListener("onLoad", animateIn);
  window.addEventListener("scroll", animateIn);
  window.addEventListener("click", (e) => {
    closeAlreadyOpenCards(e);
  });

  projectCards.forEach((card) => {
    card.addEventListener("click", (e) => {
      e.stopPropagation();
      expandAndContractCard(e);
    });
    card.addEventListener("keydown", (e: KeyboardEvent) => {
      e.stopPropagation();
      if (e.key === "Enter") {
        expandAndContractCard(e);
      }
      if (e.key === "Escape" && card.classList.contains("enlarge")) {
        expandAndContractCard(e);
      }
    });
    card.addEventListener("keyup", (e: KeyboardEvent) => {
      if (e.key === "Tab" && !card.classList.contains("enlarge")) {
        closeAlreadyOpenCards(e);
      }
    });
  });
  // Close cards when tabbing away from projects
  pullStringButton.addEventListener("focus", (e) => closeAlreadyOpenCards(e));
  firstContactCard.addEventListener("focus", (e) => closeAlreadyOpenCards(e));

  function getCardComponents(card: HTMLElement) {
    const featureList = card.children[0].children[0].children[3];
    const link = card.children[0].children[0].children[6];
    let githubButton;
    if (lightDarkModeSwitch.checked) {
      githubButton = card.children[0].children[0].children[5];
    } else {
      githubButton = card.children[0].children[0].children[4];
    }
    return [featureList, link, githubButton];
  }

  function closeCard(card: HTMLElement) {
    const [featureList, link, githubButton] = getCardComponents(card);

    card.classList.remove("enlarge");
    card.classList.add("minimized");
    featureList.classList.remove("show");
    githubButton.classList.add("hide");
    githubButton.classList.remove("show");
    if (link) {
      link.classList.remove("show");
      link.classList.add("hide");
    }
  }

  function closeAlreadyOpenCards(e) {
    for (let card of projectCards) {
      if (card.classList.contains("enlarge") && card !== e.currentTarget) {
        closeCard(card as HTMLElement);
      }
    }
  }

  function openCard(card: HTMLElement) {
    const [featureList, link, githubButton] = getCardComponents(card);

    card.classList.add("enlarge");
    card.classList.remove("minimized");
    featureList.classList.add("show");
    githubButton.classList.remove("hide");
    githubButton.classList.add("show");
    if (link) {
      link.classList.remove("hide");
      link.classList.add("show");
    }
  }

  function expandAndContractCard(e) {
    closeAlreadyOpenCards(e);
    if (e.currentTarget.classList.contains("enlarge")) {
      closeCard(e.currentTarget);
    } else {
      openCard(e.currentTarget);
    }
  }
</script>
